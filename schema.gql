# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Admission {
  type_admission: String!
}

type AuthResult {
  error: String
  token: String
  user: User
}

type BandColor {
  color: String!
  max: Float!
  min: Float!
}

type Course {
  bandColors: [BandColor!]!
  code: String!
  credits: [Credit!]!
  flow: [Course!]!
  historicalDistribution: [DistributionValue!]!

  """Course-Semester-Curriculum-Program ID """
  id: Int!
  mention: String!
  mode: String!
  name: String!
  requisites: [Course!]!
}

type CourseGroupedStats {
  cohort: String!
  color_bands: [BandColor!]!
  course_id: String!
  curriculum: String!
  distribution: [DistributionValue!]!
  id: Float!
  n_drop: Float!
  n_fail: Float!
  n_finished: Float!
  n_pass: Float!
  n_students: Float!
  n_total: Float!
  program_id: String!
  term: Float!
  type_admission: String!
  year: Float!
}

type Credit {
  label: String!
  value: Int!
}

type Curriculum {
  id: String!
  semesters: [Semester!]!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DistributionValue {
  label: String!
  value: Int!
}

type Dropout {
  active: Boolean!
  explanation: String
  model_accuracy: Float
  prob_dropout: Float
}

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress

type Employed {
  description: String
  educational_system: Boolean
  employed: Boolean
  institution: String
  months_to_first_job: Float
}

type ExternalEvaluation {
  bandColors: [BandColor!]!
  code: String!
  historicalDistribution: [DistributionValue!]!

  """ExternalEvaluation-Semester-Curriculum-Program ID """
  id: Int!
  mention: String!
  name: String!
  year: Float!
}

type ExternalEvaluationGroupedStats {
  cohort: String!
  color_bands: [BandColor!]!
  curriculum: String!
  distribution: [DistributionValue!]!
  external_evaluation_id: String!
  id: Float!
  n_drop: Float!
  n_fail: Float!
  n_finished: Float!
  n_pass: Float!
  n_students: Float!
  n_total: Float!
  program_id: String!
  term: Float!
  topic: String!
  type_admission: String!
}

type FeedbackAnswer {
  answer: String!
  question: FeedbackQuestion!
}

input FeedbackAnswerInput {
  form: Int!
  questions: [FeedbackAnswerQuestionInput!]!
}

input FeedbackAnswerQuestionInput {
  answer: String!
  question: Int!
}

type FeedbackForm {
  id: Int!
  name: String!
  priority: Int!
  questions: [FeedbackQuestion!]!
}

type FeedbackQuestion {
  id: Int!
  options: [FeedbackQuestionOption!]!
  priority: Int!
  question: String!
  type: FeedbackQuestionType!
}

type FeedbackQuestionOption {
  text: String!
  value: Int!
}

input FeedbackQuestionOptionInput {
  text: String!
  value: Int!
}

"""Type of question in a feedback form"""
enum FeedbackQuestionType {
  MultipleAnswer
  OpenText
  SingleAnswer
}

type FeedbackResult {
  answers: [FeedbackAnswer!]!
  form: FeedbackForm!
  timestamp: DateTime!
  user: User!
}

type GroupedComplementary {
  average_time_university_degree: Float
  cohort: String!
  current_retention_rate: Float!
  curriculum: String!
  inactive_time_rate: Float
  program_id: String!
  retention_rate: Float!
  timely_university_degree_rate: Float
  total_students: Float!
  type_admission: String!
  university_degree_rate: Float
}

type GroupedEmployed {
  average_time_job_finding: Float!
  cohort: String!
  curriculum: String!
  employed_rate: Float!
  employed_rate_educational_system: Float!
  program_id: String!
  total_students: Float!
  type_admission: String!
}

type IndirectTakeCourse {
  course: Course!
  requisitesUnmet: [String!]!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LockedUserResult {
  mailResult: JSONObject!
  users: [User!]!
}

type MultipleLockedUserResult {
  mailResults: [JSONObject!]!
  users: [User!]!
}

type Mutation {
  addUsersPrograms(user_programs: [UserProgram!]!): [User!]!
  answerFeedbackForm(answer: FeedbackAnswerInput!): Boolean!
  deleteUser(email: EmailAddress!): Int!
  directTakeCourses(program_id: String, student_id: String): [Course!]!
  editConfig(name: String!, value: String!): JSONObject!
  feedbackResultsCsv: String!
  indirectTakeCourses(program_id: String, student_id: String): [IndirectTakeCourse!]!
  lockMailUser(email: EmailAddress!): LockedUserResult!
  login(email: EmailAddress!, password: String!): AuthResult!
  logout: Boolean!
  mailAllLockedUsers: [JSONObject!]!
  NotificateUsers(body: String!, closing: String!, farewell: String!, footer: String!, header: String!, riskBody: String!, riskFooter: String!, riskGif: String!, riskJSON: String!, riskTitle: String!, subject: String!): [JSONObject!]!
  performanceLoadAdvices(program_id: String, student_id: String): [PerformanceByLoad!]!
  program(id: String, student_id: String): Program!
  readAnonUrl: String!
  ReNotificateUsers(content: String!, counter: Float!, email: String!, id: Float!, parameters: String!, risks: String, risksJSON: String!): [JSONObject!]!
  resetDataLoadersCache: Int!
  resetPersistence(user: String!): Int!
  sendCredentials(email: String!, LastName: String!, Name: String!, type: Boolean!): String!
  setPersistenceValue(data: JSONObject!, key: String!): Persistence!
  student(program_id: String, student_id: String): Student
  track(data: String!, datetime_client: DateTime!): Boolean!
  unlock(email: EmailAddress!, password: String!, unlockKey: String!): AuthResult!
  updateUserPrograms(userPrograms: UpdateUserPrograms!): [User!]!
  upsertUsers(users: [UpsertedUser!]!): [User!]!
}

type Notifications {
  content: String!
  counter: Float!
  date: DateTime!
  email: String!
  id: Int!
  parameters: String!
  risks: String
}

type Parameter {
  id: Int!
  loading_date: DateTime!
  loading_type: String!
}

type PerformanceByLoad {
  adviceParagraph: String!
  adviceTitle: String!
  clusterLabel: String!
  failRateHigh: Int!
  failRateLow: Int!
  failRateMid: Int!
  id: Int!
  isStudentCluster: Boolean!
  loadUnit: PerformanceLoadUnit!
  lowerBoundary: Float!
  upperBoundary: Float!
}

"""Unit used to distinguish load in the foreplan"""
enum PerformanceLoadUnit {
  Credits
}

type Persistence {
  data: JSONObject!
  key: String!
  timestamp: DateTime!
  user: String!
}

type Program {
  active: Boolean!
  courseGroupedStats: [CourseGroupedStats!]!
  curriculums: [Curriculum!]!
  desc: String!
  externalEvaluationGroupedStats: [ExternalEvaluationGroupedStats!]!
  groupedComplementary: [GroupedComplementary!]!
  groupedEmployed: [GroupedEmployed!]!
  id: String!
  lastGPA: Float!
  name: String!
  type_admission: String!
}

type Query {
  """
  Check unlockKey combination, if it's valid, returns null, if it's invalid, returns an error message.
  """
  checkUnlockKey(email: EmailAddress!, unlockKey: String!): String
  config: JSONObject!
  currentUser: AuthResult
  feedbackResults(user_ids: [String!]): [FeedbackResult!]!
  getPersistenceValue(key: String!): Persistence
  groupedSpecialTypesAdmission: String!
  myPrograms: [Program!]!
  NotificationsData: [Notifications!]!
  parameters: [Parameter!]!
  programs: [Program!]!
  riskNotification(program_id: String!, risk_type: String!): [riskNotification!]!
  students(last_n_years: Int = 2, program_id: String!): [Student!]!
  students_filter(curriculum: String!, grouped: Boolean!, program_id: String!): [Student!]!
  trackInfo(maxDate: DateTime!, minDate: DateTime!): [Track!]!
  unansweredForm: FeedbackForm
  userPersistences(user: String!): [Persistence!]!
  users: [User!]!
}

type riskNotification {
  cohort: String!
  course_id: String!
  curriculum: String!
  details: String!
  notified: Boolean!
  program_id: String!
  risk_type: String!
  student_id: String!
}

type Semester {
  courses: [Course!]!
  externalEvaluations: [ExternalEvaluation!]!
  id: Int!
}

"""Possible states of a taken course"""
enum StateCourse {
  Canceled
  Current
  Failed
  Passed
  Pending
}

type Student {
  admission: Admission!
  credits_passed: Int!
  curriculums: [String!]!
  dropout: Dropout
  employed: Employed
  graduation_term: String!
  id: ID!
  mention: String!
  n_courses_cycles: [Float!]!
  n_cycles: [String!]!
  name: String!
  programs: [Program!]!
  progress: Float!
  start_year: Int!
  state: String!
  student_rut: String!
  terms: [Term!]!
}

type TakenCourse {
  bandColors: [BandColor!]!
  code: String!
  currentDistribution: [DistributionValue!]!
  equiv: String!
  grade: Float!
  historicalDistribution: [DistributionValue!]!
  id: Int!
  name: String!
  parallelGroup: Int!
  registration: String!
  state: StateCourse!
}

type TakenExternalEvaluation {
  bandColors: [BandColor!]!
  code: String!
  currentDistribution: [DistributionValue!]!
  grade: Float!
  id: Int!
  name: String!
  registration: String!
  state: StateCourse!
  topic: String!
}

type Term {
  comments: String!
  cumulated_grade: Float!
  id: Int!
  program_grade: Float!
  program_id: String!
  semestral_grade: Float!
  situation: String!
  student_id: String!
  takenCourses: [TakenCourse!]!
  takenExternalEvaluations: [TakenExternalEvaluation!]!
  term: TermType!
  year: Int!
}

"""Possible states of a term, first semester, second semester or anual"""
enum TermType {
  Anual
  First
  Second
}

type Track {
  app_id: String!
  data: String!
  datetime: DateTime!
  datetime_client: DateTime!
  id: Int!
  user_id: String!
}

input UpdateUserPrograms {
  email: EmailAddress!
  oldPrograms: [String!]!
  programs: [String!]!
}

input UpsertedUser {
  config: JSONObject
  email: EmailAddress!
  locked: Boolean = true
  name: String = "default_name"
  oldEmail: EmailAddress
  student_id: String = ""
  tries: Int = 0
  type: UserType = Student
}

type User {
  admin: Boolean!
  config: JSONObject!
  email: EmailAddress!
  locked: Boolean!
  name: String!
  programs: [Program!]!
  student_id: String!
  studentIdValid: Boolean
  tries: Int!
  type: UserType!
  unlockKey: String!
}

input UserProgram {
  email: EmailAddress!
  program: String!
}

"""Possible options of an user type"""
enum UserType {
  Director
  Student
}
