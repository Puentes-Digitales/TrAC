fragment UserAdminInfo on User {
  email
  name
  tries
  type
  student_id
  config
  locked
  studentIdValid
  programs {
    id
  }
}

query allUsersAdmin {
  users {
    ...UserAdminInfo
  }
}

query allProgramsAdmin {
  programs {
    id
  }
}

mutation addUsersProgramsAdmin($user_programs: [UserProgram!]!) {
  addUsersPrograms(user_programs: $user_programs) {
    ...UserAdminInfo
  }
}

mutation updateUserProgramsAdmin($userPrograms: UpdateUserPrograms!) {
  updateUserPrograms(userPrograms: $userPrograms) {
    ...UserAdminInfo
  }
}

mutation upsertUsersAdmin($users: [UpsertedUser!]!) {
  upsertUsers(users: $users) {
    ...UserAdminInfo
  }
}

mutation deleteUserAdmin($email: EmailAddress!) {
  deleteUser(email: $email)
}

mutation lockMailUserAdmin($email: EmailAddress!) {
  lockMailUser(email: $email) {
    mailResult
    users {
      ...UserAdminInfo
    }
  }
}
mutation NotificateUsersAdmin(
  $body: String!
  $closing: String!
  $farewell: String!
  $footer: String!
  $header: String!
  $subject: String!
  $riskBody: String!
  $riskTitle: String!
  $riskGif: String!
  $riskFooter: String!
  $riskJSON: String!
) {
  NotificateUsers(
    header: $header
    body: $body
    footer: $footer
    subject: $subject
    farewell: $farewell
    closing: $closing
    riskBody: $riskBody
    riskTitle: $riskTitle
    riskGif: $riskGif
    riskFooter: $riskFooter
    riskJSON: $riskJSON
  )
}
mutation ReNotificateUsersAdmin(
  $content: String!
  $email: String!
  $parameters: String!
  $counter: Float!
  $id: Float!
  $risks: String!
  $riskJSON: String!
) {
  ReNotificateUsers(
    content: $content
    email: $email
    parameters: $parameters
    counter: $counter
    id: $id
    risks: $risks
    risksJSON: $riskJSON
  )
}

query NotificationsDataAdmin {
  NotificationsData {
    id
    email
    content
    date
    parameters
    counter
    risks
  }
}
mutation mailAllLockedUsersAdmin {
  mailAllLockedUsers
}

mutation editConfigAdmin($name: String!, $value: String!) {
  editConfig(name: $name, value: $value)
}

query userPersistencesAdmin($user: String!) {
  userPersistences(user: $user) {
    key
    data
    timestamp
  }
}

mutation resetPersistenceAdmin($user: String!) {
  resetPersistence(user: $user)
}

mutation resetDataLoadersCacheAdmin {
  resetDataLoadersCache
}

mutation feedbackResultsCsvAdmin {
  feedbackResultsCsv
}

query feedbackResultsAdmin($user_ids: [String!]) {
  feedbackResults(user_ids: $user_ids) {
    user {
      email
    }
    form {
      name
    }
    answers {
      answer
      question {
        question
        type
        options {
          text
          value
        }
      }
    }
    timestamp
  }
}

query trackInfo($minDate: DateTime!, $maxDate: DateTime!) {
  trackInfo(minDate: $minDate, maxDate: $maxDate) {
    id
    user_id
    data
    app_id
    datetime
  }
}

mutation sendCredential(
  $email: String!
  $Name: String!
  $LastName: String!
  $type: Boolean!
) {
  sendCredentials(email: $email, Name: $Name, LastName: $LastName, type: $type)
}
