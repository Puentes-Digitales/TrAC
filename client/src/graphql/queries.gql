fragment UserInfo on User {
  email
  name
  admin
  type
  config
  student_id
}

mutation login($email: EmailAddress!, $password: String!) {
  login(email: $email, password: $password) {
    user {
      ...UserInfo
    }
    error
  }
}

query currentUser {
  currentUser {
    user {
      ...UserInfo
    }
  }
}

query checkUnlock($email: EmailAddress!, $unlockKey: String!) {
  checkUnlockKey(email: $email, unlockKey: $unlockKey)
}

mutation unlock(
  $email: EmailAddress!
  $password: String!
  $unlockKey: String!
) {
  unlock(email: $email, password: $password, unlockKey: $unlockKey) {
    user {
      ...UserInfo
    }
    error
  }
}

mutation logout {
  logout
}

mutation searchProgram($id: String, $student_id: String) {
  program(id: $id, student_id: $student_id) {
    id
    name
    desc
    active
    groupedComplementary {
      timely_university_degree_rate
      total_students
      average_time_university_degree
      program_id
      curriculum
      type_admission
      cohort
      university_degree_rate
      current_retention_rate
      retention_rate
      inactive_time_rate
    }

    groupedEmployed {
      employed_rate
      total_students
      average_time_job_finding
      program_id
      curriculum
      type_admission
      cohort
      employed_rate_educational_system
    }
    courseGroupedStats {
      id
      program_id
      course_id
      curriculum
      type_admission
      cohort
      year
      term
      n_students
      n_total
      n_finished
      n_pass
      n_drop
      n_fail
      distribution {
        label
        value
      }
      color_bands {
        min
        max
        color
      }
    }
    externalEvaluationGroupedStats {
      id
      external_evaluation_id
      topic
      program_id
      curriculum
      type_admission
      cohort
      term
      n_students
      n_total
      n_finished
      n_pass
      n_drop
      n_fail
      distribution {
        label
        value
      }
      color_bands {
        min
        max
        color
      }
    }
    curriculums {
      id
      semesters {
        id
        courses {
          code
          name
          credits {
            label
            value
          }
          mention
          mode
          flow {
            code
          }
          requisites {
            code
          }
          historicalDistribution {
            label
            value
          }
          bandColors {
            min
            max
            color
          }
        }
        externalEvaluations {
          code
          name
          bandColors {
            min
            max
            color
          }
        }
      }
    }
  }
}

mutation searchStudent($student_id: String, $program_id: String) {
  student(student_id: $student_id, program_id: $program_id) {
    id
    programs {
      id
      name
    }
    curriculums
    start_year
    n_courses_cycles
    n_cycles
    mention
    graduation_term
    terms {
      id
      student_id
      year
      term
      situation
      comments
      semestral_grade
      cumulated_grade
      program_grade
      takenCourses {
        id
        code
        equiv
        name
        registration
        grade
        state
        parallelGroup
        currentDistribution {
          label
          value
        }
        historicalDistribution {
          label
          value
        }
        bandColors {
          min
          max
          color
        }
      }
      takenExternalEvaluations {
        id
        code
        topic
        name
        registration
        state
        grade
        currentDistribution {
          label
          value
        }
        bandColors {
          min
          max
          color
        }
      }
    }
    dropout {
      prob_dropout
      model_accuracy
      active
    }
    admission {
      type_admission
    }
    employed {
      employed
      institution
      educational_system
      months_to_first_job
    }
    credits_passed
  }
}

query myPrograms {
  myPrograms {
    id
    name
  }
}

query groupedSpecialTypesAdmission {
  groupedSpecialTypesAdmission
}

mutation track($data: String!, $datetime_client: DateTime!) {
  track(data: $data, datetime_client: $datetime_client)
}

query config {
  config
}

query studentsList($program_id: String!) {
  students(program_id: $program_id) {
    id
    name
    progress
    start_year
    dropout {
      prob_dropout
      explanation
    }
    admission {
      type_admission
    }
  }
}

query studentsFilterList(
  $program_id: String!
  $curriculum: String!
  $grouped: Boolean!
) {
  students_filter(
    program_id: $program_id
    curriculum: $curriculum
    grouped: $grouped
  ) {
    id
    programs {
      id
    }
    curriculums
    start_year
    mention
    admission {
      type_admission
    }
    terms {
      year
      term
      semestral_grade
      comments
      program_id
    }
  }
}
query parameters {
  parameters {
    id
    loading_type
    loading_date
  }
}

mutation performanceLoadAdvices($student_id: String, $program_id: String) {
  performanceLoadAdvices(student_id: $student_id, program_id: $program_id) {
    id
    loadUnit
    lowerBoundary
    upperBoundary
    failRateLow
    failRateMid
    failRateHigh
    adviceTitle
    adviceParagraph
    clusterLabel
    isStudentCluster
  }
}

mutation directTakeCourses($student_id: String, $program_id: String) {
  directTakeCourses(student_id: $student_id, program_id: $program_id) {
    id
    code
  }
}

mutation indirectTakeCourses($student_id: String, $program_id: String) {
  indirectTakeCourses(student_id: $student_id, program_id: $program_id) {
    course {
      id
      code
    }
    requisitesUnmet
  }
}

query getPersistenceValue($key: String!) {
  getPersistenceValue(key: $key) {
    key
    data
  }
}

mutation setPersistenceValue($key: String!, $data: JSONObject!) {
  setPersistenceValue(key: $key, data: $data) {
    __typename
  }
}

query unansweredForm {
  unansweredForm {
    id
    name
    priority
    questions {
      id
      question
      type
      priority
      options {
        text
        value
      }
    }
  }
}

mutation answerFeedbackForm($answer: FeedbackAnswerInput!) {
  answerFeedbackForm(answer: $answer)
}

query riskNotication($program_id: String!, $risk_type: String!) {
  riskNotification(program_id: $program_id, risk_type: $risk_type) {
    student_id
    course_id
    program_id
    curriculum
    cohort
    risk_type
    details
  }
}

mutation anonHelpdeskUrl {
  readAnonUrl
}
